{"ast":null,"code":"var _jsxFileName = \"/Users/tomer/Documents/Tomer/Personal-Projects/Inventory-Managment-Project/Frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.tsx\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n// Define the shape of your JWT payload\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the AuthContext with default values\nexport const AuthContext = /*#__PURE__*/createContext({\n  token: null,\n  role: null,\n  login: () => {},\n  logout: () => {}\n});\n\n// Define the AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [role, setRole] = useState(localStorage.getItem('role'));\n  useEffect(() => {\n    if (token) {\n      try {\n        // Decode the token with type safety\n        const decodedToken = jwtDecode(token);\n\n        // Check if the token has expired\n        if (decodedToken.exp * 1000 < Date.now()) {\n          logout();\n        }\n      } catch (error) {\n        console.error('Invalid token:', error);\n        logout();\n      }\n    }\n  }, [token]);\n\n  // Function to handle login\n  const login = (newToken, newRole) => {\n    setToken(newToken);\n    setRole(newRole);\n    localStorage.setItem('token', newToken);\n    localStorage.setItem('role', newRole);\n  };\n\n  // Function to handle logout\n  const logout = () => {\n    setToken(null);\n    setRole(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      role,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"lh6hSg0hignX19agpMxIGh3C770=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","token","role","login","logout","AuthProvider","children","_s","setToken","localStorage","getItem","setRole","decodedToken","exp","Date","now","error","console","newToken","newRole","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tomer/Documents/Tomer/Personal-Projects/Inventory-Managment-Project/Frontend/src/context/AuthContext.tsx"],"sourcesContent":["// src/context/AuthContext.tsx\n\nimport React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n// Define the shape of your JWT payload\ninterface JwtPayload {\n  exp: number; // Expiration time\n  iat: number; // Issued at\n  sub: string; // Subject (e.g., user ID)\n}\n\n// Define the context type\ninterface AuthContextType {\n  token: string | null;\n  role: string | null;\n  login: (token: string, role: string) => void;\n  logout: () => void;\n}\n\n// Create the AuthContext with default values\nexport const AuthContext = createContext<AuthContextType>({\n  token: null,\n  role: null,\n  login: () => {},\n  logout: () => {},\n});\n\n// Define the AuthProvider component\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\n  const [role, setRole] = useState<string | null>(localStorage.getItem('role'));\n\n  useEffect(() => {\n    if (token) {\n      try {\n        // Decode the token with type safety\n        const decodedToken: JwtPayload = jwtDecode<JwtPayload>(token);\n        \n        // Check if the token has expired\n        if (decodedToken.exp * 1000 < Date.now()) {\n          logout();\n        }\n      } catch (error) {\n        console.error('Invalid token:', error);\n        logout();\n      }\n    }\n  }, [token]);\n\n  // Function to handle login\n  const login = (newToken: string, newRole: string) => {\n    setToken(newToken);\n    setRole(newRole);\n    localStorage.setItem('token', newToken);\n    localStorage.setItem('role', newRole);\n  };\n\n  // Function to handle logout\n  const logout = () => {\n    setToken(null);\n    setRole(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, role, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAC5E,OAAOC,SAAS,MAAM,YAAY;;AAElC;;AAOA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAkB;EACxDO,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,MAAM,EAAEA,CAAA,KAAM,CAAC;AACjB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGb,QAAQ,CAAgBc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAChF,MAAM,CAACR,IAAI,EAAES,OAAO,CAAC,GAAGhB,QAAQ,CAAgBc,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAE7Ed,SAAS,CAAC,MAAM;IACd,IAAIK,KAAK,EAAE;MACT,IAAI;QACF;QACA,MAAMW,YAAwB,GAAGf,SAAS,CAAaI,KAAK,CAAC;;QAE7D;QACA,IAAIW,YAAY,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACxCX,MAAM,CAAC,CAAC;QACV;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtCZ,MAAM,CAAC,CAAC;MACV;IACF;EACF,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;;EAEX;EACA,MAAME,KAAK,GAAGA,CAACe,QAAgB,EAAEC,OAAe,KAAK;IACnDX,QAAQ,CAACU,QAAQ,CAAC;IAClBP,OAAO,CAACQ,OAAO,CAAC;IAChBV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;IACvCT,YAAY,CAACW,OAAO,CAAC,MAAM,EAAED,OAAO,CAAC;EACvC,CAAC;;EAED;EACA,MAAMf,MAAM,GAAGA,CAAA,KAAM;IACnBI,QAAQ,CAAC,IAAI,CAAC;IACdG,OAAO,CAAC,IAAI,CAAC;IACbF,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCZ,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,oBACEtB,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,KAAK;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAO,CAAE;IAAAE,QAAA,EACzDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,EAAA,CA1CWF,YAA+C;AAAAuB,EAAA,GAA/CvB,YAA+C;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}