{"ast":null,"code":"// src/utils/axiosInstance.ts\n\nimport axios from 'axios';\n\n// **Set the baseURL to point to your backend server**\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/api' // Replace with your backend URL and port if different\n});\n\n// Add a request interceptor to include the Authorization header if a token exists\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject"],"sources":["/Users/tomer/Documents/Tomer/Personal-Projects/Inventory-Managment-Project/Frontend/src/utils/axiosInstance.ts"],"sourcesContent":["// src/utils/axiosInstance.ts\n\nimport axios from 'axios';\n\n// **Set the baseURL to point to your backend server**\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/api', // Replace with your backend URL and port if different\n});\n\n// Add a request interceptor to include the Authorization header if a token exists\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token && config.headers) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default axiosInstance;"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,2BAA2B,CAAE;AACxC,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,IAAID,MAAM,CAACI,OAAO,EAAE;IAC3BJ,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}